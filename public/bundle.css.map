{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/components/Stats.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n\n  import Scene from \"./components/Scene.svelte\";\n  import Controls from \"./components/Controls.svelte\";\n  import Stats from \"./components/Stats.svelte\";\n  import CodeView from \"./components/CodeView.svelte\";\n\n  import * as THREE from \"three\";\n\n  import basicColor from \"./shaders/BasicColor\";\n  import basicColorLights from \"./shaders/BasicColorLights\";\n  import checker from \"./shaders/Checker\";\n  import dots from \"./shaders/Dots\";\n  import simpleLines from \"./shaders/SimpleLines\";\n  import fadedLines from \"./shaders/FadedLines\";\n  import starburst from \"./shaders/Starburst\";\n  import matrix from \"./shaders/Matrix\";\n  import normal from \"./shaders/Normal\";\n  import voronoise from \"./shaders/Voronoise\";\n  import woodGrain from \"./shaders/WoodGrain\";\n  import simplexNoise3D from \"./shaders/SimplexNoise3D\";\n  import perlinNoise3D from \"./shaders/PerlinNoise3D\";\n  import perlinVertexDisp from \"./shaders/PerlinVertexDisp\";\n  import polkaNoise from \"./shaders/PolkaNoise\";\n  import fresnel2Color from \"./shaders/Fresnel2Color\";\n\n  let shaders = [\n    basicColor,\n    basicColorLights,\n    checker,\n    dots,\n    simpleLines,\n    fadedLines,\n    starburst,\n    normal,\n    matrix,\n    voronoise,\n    woodGrain,\n    simplexNoise3D,\n    perlinNoise3D,\n    perlinVertexDisp,\n    polkaNoise,\n    fresnel2Color\n  ];\n\n  let shapes = [\n    {\n      name: \"Cube\",\n      class: \"BoxGeometry\",\n      args: [200, 200, 200, 50, 50, 50]\n    },\n    { name: \"Sphere\", class: \"SphereGeometry\", args: [150, 32, 32] },\n    {\n      name: \"Cylinder\",\n      class: \"CylinderGeometry\",\n      args: [100, 100, 200, 32, 100]\n    },\n    {\n      name: \"Torus Knot\",\n      class: \"TorusKnotGeometry\",\n      args: [100, 30, 100, 16]\n    }\n  ];\n\n  let threeVersion = THREE.REVISION;\n\n  let currentShader = {};\n  let currentShaderObject = {};\n  let currentShape = shapes[0];\n  let showCode = false;\n\n  onMount(async () => {\n    setShaderFromName(\"Basic Color\");\n  });\n\n  function getShaderFromName(name) {\n    return shaders.find(x => x.name === name);\n  }\n\n  function setShaderFromName(name) {\n    let shader = getShaderFromName(name);\n    //create the options object to send to ShaderMaterial.\n    let shaderObject = {\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      lights: true\n    };\n    // Add uniforms if present.\n    if (\"uniforms\" in shader) {\n      // Using UniformUtils will clone the shader files uniforms,\n      shaderObject.uniforms = THREE.UniformsUtils.merge([\n        THREE.UniformsLib[\"lights\"],\n        shader.uniforms\n      ]);\n    }\n    // Set this new material on the mesh.\n    let material = new THREE.ShaderMaterial(shaderObject);\n    // add the original uniforms here so we can loop over them in the Controls,\n    // because other uniforms are added that we don't want controls for.\n    material.customUniforms = shader.uniforms;\n\n    currentShader = material;\n    currentShaderObject = shader;\n  }\n\n  function getShapeFromName(name) {\n    return shapes.find(x => x.name === name);\n  }\n\n  function changeShape(shapeName) {\n    currentShape = getShapeFromName(shapeName);\n  }\n</script>\n\n<style>\n  #info {\n    padding: 10px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    font-size: 12px;\n    line-height: 16px;\n    color: #fff;\n  }\n  #info a {\n    color: #fff;\n  }\n</style>\n\n<Scene {currentShape} {currentShader} />\n<Stats />\n<Controls\n  {shapes}\n  {shaders}\n  {currentShader}\n  on:shapeSelected={e => {\n    changeShape(e.detail.shapeName);\n  }}\n  on:shaderSelected={e => {\n    setShaderFromName(e.detail.shaderName);\n  }}\n  on:codeButtonClick={e => {\n    showCode = true;\n  }} />\n<div id=\"info\">\n  Three.js ShaderMaterial experiments.\n  <br />\n  Originals at\n  <a\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://2pha.com/blog/experimenting-threejs-shaders-and-shadermaterial/\">\n    this blog post\n  </a>\n  <br />\n  Build with Three.js {threeVersion} and Svelte.js\n  <br />\n  <a\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://github.com/2pha/svelte-three-shaders\">\n    https://github.com/2pha/svelte-three-shaders\n  </a>\n</div>\n<CodeView\n  bind:visible={showCode}\n  shaderName={currentShaderObject.name}\n  vertexShader={currentShaderObject.vertexShader}\n  fragmentShader={currentShaderObject.fragmentShader} />\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { onDestroy } from \"svelte\";\n\n  let div;\n  let fps = 0;\n  let frames = 0;\n  let beginTime = 0;\n  let prevTime = 0;\n  let _frameId = \"\";\n\n  function end() {\n    frames++;\n    let time = (performance || Date).now();\n    if (time >= prevTime + 1000) {\n      let _fps = (frames * 1000) / (time - prevTime);\n      prevTime = time;\n      frames = 0;\n      fps = _fps.toFixed(0);\n    }\n    return time;\n  }\n\n  function update() {\n    beginTime = end();\n  }\n\n  function loop() {\n    update();\n    _frameId = window.requestAnimationFrame(() => {\n      loop();\n    });\n  }\n\n  onMount(async () => {\n    beginTime = prevTime = (performance || Date).now();\n    frames = 0;\n    loop();\n  });\n\n  onDestroy(() => {\n    window.cancelAnimationFrame(_frameId);\n  });\n</script>\n\n<style>\n  div {\n    position: fixed;\n    z-index: 100;\n    padding: 10px;\n    right: 0px;\n    bottom: 0px;\n    color: #fff;\n  }\n</style>\n\n<div bind:this={div}>{fps} fps</div>\n"
  ],
  "names": [],
  "mappings": "AAoHE,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,oBAAK,CAAC,CAAC,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACb,CAAC;ACjFD,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,KAAK,CACf,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,IAAI,AACb,CAAC"
}